{"name":"FUSE","tagline":"Framework for Understanding Structural Errors (FUSE, R package)","body":"Framework for Understanding Structural Errors (FUSE, R package)\r\n======\r\n\r\nImplementation of the framework for hydrological modelling FUSE, based on the Fortran version described in Clark et al. (2008). The package consists of two modules: Soil Moisture Accounting module (fusesma.sim) and Gamma routing module (fuserouting.sim). It also contains default parameter ranges (fusesma.ranges and fuserouting.ranges) and three data objects: DATA, parameters and modlist.\r\n\r\n### Basics\r\nInstall and load packages\r\n```R\r\nlibrary(devtools)\r\ninstall_github(\"ICHydro/r_fuse\", subdir = \"fuse\")\r\nlibrary(fuse)\r\n\r\n# Other packages needed to run the examples below\r\nif(!require(zoo)) install.packages(\"zoo\")\r\nlibrary(zoo)\r\nif(!require(tgp)) install.packages(\"tgp\")\r\nlibrary(tgp)\r\nif(!require(qualV)) install.packages(\"qualV\")\r\nlibrary(qualV)\r\n```\r\n\r\nLoad sample data (daily time step)\r\n```R\r\ndata(DATA)\r\nmyDELTIM <- 1\r\n```\r\n\r\nDefine parameter ranges\r\n```R\r\nDefaultRanges <- data.frame(t(data.frame(c(fusesma.ranges(),\r\n                                           fuserouting.ranges()))))\r\nnames(DefaultRanges) <- c(\"Min\",\"Max\")\r\n```\r\n\r\nSample parameter set using Latin Hypercube method\r\n```R\r\nnumberOfRuns <- 100\r\nparameters <- lhs( numberOfRuns, as.matrix(DefaultRanges) )\r\nparameters <- data.frame(parameters)\r\nnames(parameters) <- row.names(DefaultRanges)\r\n```\r\n\r\nAlternatively, sample parameter set using built-in function\r\n```R\r\nparameters <- GenerateFUSEParameters(100)\r\n```\r\n\r\n### Example usage with 1 model structure\r\nDefine the model to use, e.g. TOPMODEL (MID = 60)\r\n```R\r\nmyMID <- 60\r\n```\r\n\r\nUse the built-in function to run FUSE for the 1st sampled parameter set\r\n```R\r\nx <- RunFUSE(DATA, parameters[1,], myDELTIM, myMID)\r\n\r\nplot(x,xlab=\"\",ylab=\"Streamflow [mm/day]\")\r\n```\r\n\r\nRun FUSE for all the sampled parameter sets \r\n```R\r\nplot(DATA$Q,type=\"l\",xlab=\"\",ylab=\"Streamflow [mm/day]\")\r\nallQ <- data.frame(matrix(NA,ncol=numberOfRuns,nrow=dim(DATA)[1]))\r\nfor (i in 1:numberOfRuns){\r\n  allQ[,i] <- RunFUSE(DATA, parameters[i,], myDELTIM, myMID)\r\n  lines(zoo(allQ[,i],order.by=index(DATA)),col=\"gray\",lwd=0.1)\r\n}\r\nlines(DATA$Q,col=\"black\")\r\n```\r\n\r\n### Ensemble example usage\r\nDefine a group of model structures to use\r\n```R \r\nmids <- c(60, 230, 342, 426)\r\n```\r\n \r\nRun a multi-model calibration using the Nash-Sutcliffe efficiency as objective function\r\n```R\r\nindices <- rep(NA,4*numberOfRuns)\r\ndischarges <- matrix(NA,ncol=4*numberOfRuns,nrow=dim(DATA)[1])\r\nkCounter <- 0\r\n\r\nfor (m in 1:4){\r\n\r\n  myMID <- mids[m]\r\n\r\n  for (pid in 1:numberOfRuns){\r\n\r\n    kCounter <- kCounter + 1\r\n    ParameterSet <- as.list(parameters[pid,])\r\n    \r\n    Qrout <- RunFUSE(DATA, parameters[pid,], myDELTIM, myMID)\r\n \r\n    indices[kCounter] <- EF(DATA$Q,Qrout)  \r\n    discharges[,kCounter] <- Qrout\r\n    \r\n    }\r\n}\r\n```\r\n\r\nCompare results\r\n```R \r\nbestRun <- which(indices == max(indices))\r\n \r\nbestModel <- function(runNumber){\r\n if (runNumber<(numberOfRuns+1)) myBestModel <- \"TOPMODEL\"\r\n if (runNumber>(numberOfRuns+1) & runNumber<(2*numberOfRuns+1)) myBestModel <- \"ARNOXVIC\"\r\n if (runNumber>(2*numberOfRuns+1) & runNumber<(3*numberOfRuns+1)) myBestModel <- \"PRMS\"\r\n if (runNumber>(3*numberOfRuns+1) & runNumber<(4*numberOfRuns+1)) myBestModel <- \"SACRAMENTO\"\r\n return(myBestModel)\r\n}\r\nbestModel(bestRun)\r\n \r\nplot(coredata(DATA$Q),type=\"l\",xlab=\"\",ylab=\"Streamflow [mm/day]\", lwd=0.5)\r\n \r\nfor(pid in 1:(4*numberOfRuns)){\r\n lines(discharges[,pid], col=\"gray\", lwd=3)\r\n}\r\n \r\nlines(coredata(DATA$Q),col=\"black\", lwd=1)\r\nlines(discharges[,bestRun],col=\"red\", lwd=1)\r\n```\r\n\r\nHow the best simulation of each model structure compare to each other?\r\n```R \r\nbestRun0060 <- which(indices[1:numberOfRuns] == max(indices[1:numberOfRuns]))\r\nbestRun0230 <- numberOfRuns + which(indices[(numberOfRuns+1):(2*numberOfRuns)] == max(indices[(numberOfRuns+1):(2*numberOfRuns)]))\r\nbestRun0342 <- 2*numberOfRuns + which(indices[(2*numberOfRuns+1):(3*numberOfRuns)] == max(indices[(2*numberOfRuns+1):(3*numberOfRuns)]))\r\nbestRun0426 <- 3*numberOfRuns + which(indices[(3*numberOfRuns+1):(4*numberOfRuns)] == max(indices[(3*numberOfRuns+1):(4*numberOfRuns)]))\r\n \r\nplot(coredata(DATA$Q),type=\"l\",xlab=\"\",ylab=\"Streamflow [mm/day]\", lwd=1)\r\nlines(discharges[,bestRun0060], col=\"green\", lwd=1)\r\nlines(discharges[,bestRun0230], col=\"blue\", lwd=1)\r\nlines(discharges[,bestRun0342], col=\"pink\", lwd=1)\r\nlines(discharges[,bestRun0426], col=\"orange\", lwd=1)\r\n \r\nlegend(\"top\", \r\n        c(\"TOPMODEL\", \"ARNOXVIC\", \"PRMS\",\"SACRAMENTO\"), \r\n        col = c(\"green\", \"blue\", \"pink\", \"orange\"),\r\n        lty = c(1, 1, 1, 1))\r\n```\r\n\r\n# Leave your feedback\r\nI would greatly appreciate if you could leave your feedbacks via email (cvitolodev@gmail.com).\r\n","google":"UA-44379190-8","note":"Don't delete this file! It's used internally to help with page regeneration."}